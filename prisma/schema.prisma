generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                 String           @id @default(uuid())
  nome               String
  email              String           @unique
  senha              String
  tipo               TipoUsuario
  dataCadastro       DateTime         @default(now()) @map("created_at")
  dataAtualizacao    DateTime         @updatedAt @map("updated_at")
  planoId            String
  mensagensRecebidas Mensagem[]       @relation("MensagensRecebidas")
  mensagensEnviadas  Mensagem[]       @relation("MensagensEnviadas")
  progressos         ProgressoAluno[]
  turmasProfessor    Turma[]          @relation("ProfessorTurma")
  plano              Plano            @relation(fields: [planoId], references: [id])
  turmas             Turma[]          @relation("AlunoTurma")
  cursos             Curso[]

  @@map("usuarios")
}

model Plano {
  id        String    @id @default(uuid())
  nome      String
  descricao String
  preco     Float?
  createdAt DateTime  @default(now()) @map("created_at")
  usuarios  Usuario[]

  @@map("planos")
}

model Curso {
  id           String   @id @default(uuid())
  titulo       String
  descricao    String?
  categoria    String?
  cargaHoraria Int?
  professor    Usuario  @relation(fields: [professorId], references: [id])
  professorId  String
  modulos      Modulo[]
  turmas       Turma[] // ‚Üê Adicione esta linha para o relacionamento inverso
  createdAt    DateTime @default(now())

  @@map("cursos")
}

model Turma {
  id          String    @id @default(uuid())
  nome        String
  cursoId     String
  professorId String
  dataInicio  DateTime
  dataFim     DateTime
  createdAt   DateTime  @default(now()) @map("created_at")
  curso       Curso     @relation(fields: [cursoId], references: [id])
  professor   Usuario   @relation("ProfessorTurma", fields: [professorId], references: [id])
  alunos      Usuario[] @relation("AlunoTurma")

  @@map("turmas")
}

model Modulo {
  id         String      @id @default(uuid())
  cursoId    String
  titulo     String
  ordem      Int
  createdAt  DateTime    @default(now()) @map("created_at")
  apostilas  Apostila[]
  avaliacoes Avaliacao[]
  curso      Curso       @relation(fields: [cursoId], references: [id])
  videos     Video[]

  @@map("modulos")
}

model Video {
  id         String           @id @default(uuid())
  moduloId   String
  titulo     String
  urlVideo   String
  duracao    Int
  createdAt  DateTime         @default(now()) @map("created_at")
  progressos ProgressoAluno[]
  modulo     Modulo           @relation(fields: [moduloId], references: [id])

  @@map("videos")
}

model Apostila {
  id         String           @id @default(uuid())
  moduloId   String
  titulo     String
  arquivoUrl String
  createdAt  DateTime         @default(now()) @map("created_at")
  modulo     Modulo           @relation(fields: [moduloId], references: [id])
  progressos ProgressoAluno[]

  @@map("apostilas")
}

model Avaliacao {
  id         String           @id @default(uuid())
  moduloId   String
  titulo     String
  descricao  String
  createdAt  DateTime         @default(now()) @map("created_at")
  modulo     Modulo           @relation(fields: [moduloId], references: [id])
  progressos ProgressoAluno[]

  @@map("avaliacoes")
}

model ProgressoAluno {
  id                  String     @id @default(uuid())
  alunoId             String
  videoId             String?
  apostilaId          String?
  avaliacaoId         String?
  progressoVideo      Int?       @default(0)
  baixouApostila      Boolean    @default(false)
  notaAvaliacao       Float?
  dataUltimaInteracao DateTime   @default(now())
  aluno               Usuario    @relation(fields: [alunoId], references: [id])
  apostila            Apostila?  @relation(fields: [apostilaId], references: [id])
  avaliacao           Avaliacao? @relation(fields: [avaliacaoId], references: [id])
  video               Video?     @relation(fields: [videoId], references: [id])

  @@map("progresso_aluno")
}

model Mensagem {
  id             String   @id @default(uuid())
  remetenteId    String
  destinatarioId String
  conteudo       String
  lida           Boolean  @default(false)
  createdAt      DateTime @default(now()) @map("created_at")
  destinatario   Usuario  @relation("MensagensRecebidas", fields: [destinatarioId], references: [id])
  remetente      Usuario  @relation("MensagensEnviadas", fields: [remetenteId], references: [id])

  @@map("mensagens")
}

enum TipoUsuario {
  ALUNO
  PROFESSOR
  ADMIN
}

enum NivelCurso {
  INICIANTE
  INTERMEDIARIO
  AVANCADO
}

enum StatusTurma {
  ABERTA
  EM_ANDAMENTO
  CONCLUIDA
  CANCELADA
}

enum TipoNotificacao {
  SISTEMA
  MENSAGEM
  ATIVIDADE
  AVALIACAO
}
