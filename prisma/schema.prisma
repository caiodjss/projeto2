generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                  String           @id @default(uuid())
  nome                String
  email               String           @unique
  senha               String
  tipo                TipoUsuario
  dataCadastro        DateTime         @default(now()) @map("created_at")
  dataAtualizacao     DateTime         @updatedAt @map("updated_at")
  planoId             String?
  mensagensRecebidas  Mensagem[]       @relation("MensagensRecebidas")
  mensagensEnviadas   Mensagem[]       @relation("MensagensEnviadas")
  progressos          ProgressoAluno[]
  cursosMinistrados   Curso[]          @relation("CursosMinistrados")
  plano               Plano?           @relation(fields: [planoId], references: [id])
  turmasMatriculadas  Turma[]          @relation("AlunoTurma")
  turmasComoProfessor Turma[]          @relation("ProfessorTurma")

  @@map("usuarios")
}

model Plano {
  id        String    @id @default(uuid())
  nome      String
  descricao String
  preco     Float?
  usuarios  Usuario[]
  createdAt DateTime  @default(now()) @map("created_at")

  @@map("planos")
}

model Curso {
  id           String      @id @default(uuid())
  titulo       String
  descricao    String?
  categoria    NivelCurso?
  cargaHoraria Int?
  professor    Usuario     @relation(fields: [professorId], references: [id], name: "CursosMinistrados")
  professorId  String
  modulos      Modulo[]
  turmas       Turma[]
  createdAt    DateTime    @default(now())

  @@map("cursos")
}

model Turma {
  id          String      @id @default(uuid())
  nome        String
  curso       Curso       @relation(fields: [cursoId], references: [id])
  cursoId     String
  professor   Usuario     @relation(fields: [professorId], references: [id], name: "ProfessorTurma")
  professorId String
  alunos      Usuario[]   @relation("AlunoTurma")
  dataInicio  DateTime
  dataFim     DateTime
  status      StatusTurma @default(ABERTA)
  createdAt   DateTime    @default(now()) @map("created_at")

  @@map("turmas")
}

model Modulo {
  id         String      @id @default(uuid())
  curso      Curso       @relation(fields: [cursoId], references: [id])
  cursoId    String
  titulo     String
  ordem      Int
  apostilas  Apostila[]
  avaliacoes Avaliacao[]
  videos     Video[]
  createdAt  DateTime    @default(now()) @map("created_at")

  @@map("modulos")
}

model Video {
  id         String           @id @default(uuid())
  modulo     Modulo           @relation(fields: [moduloId], references: [id])
  moduloId   String
  titulo     String
  urlVideo   String
  duracao    Int
  progressos ProgressoAluno[]
  createdAt  DateTime         @default(now()) @map("created_at")

  @@map("videos")
}

model Apostila {
  id         String           @id @default(uuid())
  modulo     Modulo           @relation(fields: [moduloId], references: [id])
  moduloId   String
  titulo     String
  arquivoUrl String
  progressos ProgressoAluno[]
  createdAt  DateTime         @default(now()) @map("created_at")

  @@map("apostilas")
}

model Avaliacao {
  id         String           @id @default(uuid())
  modulo     Modulo           @relation(fields: [moduloId], references: [id])
  moduloId   String
  titulo     String
  descricao  String
  progressos ProgressoAluno[]
  createdAt  DateTime         @default(now()) @map("created_at")

  @@map("avaliacoes")
}

model ProgressoAluno {
  id                  String     @id @default(uuid())
  aluno               Usuario    @relation(fields: [alunoId], references: [id])
  alunoId             String
  video               Video?     @relation(fields: [videoId], references: [id])
  videoId             String?
  apostila            Apostila?  @relation(fields: [apostilaId], references: [id])
  apostilaId          String?
  avaliacao           Avaliacao? @relation(fields: [avaliacaoId], references: [id])
  avaliacaoId         String?
  progressoVideo      Int?       @default(0)
  baixouApostila      Boolean    @default(false)
  notaAvaliacao       Float?
  dataUltimaInteracao DateTime   @default(now())

  @@unique([alunoId, videoId], name: "alunoId_videoId")
  @@unique([alunoId, apostilaId], name: "alunoId_apostilaId")
  @@unique([alunoId, avaliacaoId], name: "alunoId_avaliacaoId")

  @@map("progresso_aluno")
}

model Mensagem {
  id             String   @id @default(uuid())
  remetente      Usuario  @relation("MensagensEnviadas", fields: [remetenteId], references: [id])
  remetenteId    String
  destinatario   Usuario  @relation("MensagensRecebidas", fields: [destinatarioId], references: [id])
  destinatarioId String
  conteudo       String
  lida           Boolean  @default(false)
  createdAt      DateTime @default(now()) @map("created_at")

  @@map("mensagens")
}

enum TipoUsuario {
  ALUNO
  PROFESSOR
  ADMIN
}

enum NivelCurso {
  INICIANTE
  INTERMEDIARIO
  AVANCADO
}

enum StatusTurma {
  ABERTA
  EM_ANDAMENTO
  CONCLUIDA
  CANCELADA
}
